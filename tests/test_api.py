import os
import asyncio
import tempfile

import aiohttp
import pytest
import uvicorn
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy.pool import NullPool

from models import Base
from main import app
from database import get_session


@pytest.fixture(scope="session")
def anyio_backend():
    return "asyncio"


@pytest.fixture(scope="session")
async def test_engine_and_sessionmaker():
    """–°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ë–î –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    fd, db_path = tempfile.mkstemp(prefix="recipes_test_", suffix=".db")
    os.close(fd)
    url = f"sqlite+aiosqlite:///{db_path}"

    engine = create_async_engine(
        url,
        echo=False,
        future=True,
        poolclass=NullPool,
        connect_args={"timeout": 30, "check_same_thread": False},
    )
    session_maker = async_sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã –∑–∞—Ä–∞–Ω–µ–µ
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    yield engine, session_maker

    # –ß–∏—Å—Ç–∏–º –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤
    try:
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.drop_all)
        await engine.dispose()
    except Exception:
        pass
    
    try:
        os.remove(db_path)
    except (FileNotFoundError, PermissionError):
        pass


@pytest.fixture(scope="session")
async def app_with_overrides(test_engine_and_sessionmaker):
    """–ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å get_session –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î"""
    os.environ["TESTING"] = "1"

    _, session_maker = test_engine_and_sessionmaker

    async def override_get_session():
        async with session_maker() as s:
            yield s

    app.dependency_overrides[get_session] = override_get_session
    yield app
    app.dependency_overrides.clear()


@pytest.fixture(scope="session")
async def live_server(app_with_overrides):
    """
    –ó–∞–ø—É—Å–∫–∞–µ–º uvicorn —Å–µ—Ä–≤–µ—Ä –ë–ï–ó lifespan —Å–æ–±—ã—Ç–∏—è,
    —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –ë–î
    """
    host, port = "127.0.0.1", 8001
    
    config = uvicorn.Config(
        app_with_overrides,
        host=host,
        port=port,
        log_level="error",  # –ú–∏–Ω–∏–º—É–º –ª–æ–≥–æ–≤
        loop="asyncio",
        lifespan="off",  # –í–ê–ñ–ù–û: –æ—Ç–∫–ª—é—á–∞–µ–º lifespan
    )
    server = uvicorn.Server(config)

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    async def _run():
        await server.serve()

    task = asyncio.create_task(_run())

    # –ñ–¥—ë–º, –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –Ω–∞—á–Ω—ë—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
    base_url = f"http://{host}:{port}"
    timeout = aiohttp.ClientTimeout(total=5)
    
    server_ready = False
    async with aiohttp.ClientSession(timeout=timeout) as sess:
        for attempt in range(50):  # 50 –ø–æ–ø—ã—Ç–æ–∫ √ó 0.2 —Å–µ–∫ = 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
            try:
                async with sess.get(f"{base_url}/docs") as resp:
                    if resp.status in (200, 404):
                        server_ready = True
                        print(f"–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {base_url}")
                        break
            except (aiohttp.ClientError, asyncio.TimeoutError):
                pass
            await asyncio.sleep(0.2)
    
    if not server_ready:
        server.should_exit = True
        try:
            await asyncio.wait_for(task, timeout=2)
        except (TimeoutError, asyncio.CancelledError):
            task.cancel()
        pytest.fail("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –∑–∞ 10 —Å–µ–∫—É–Ω–¥")

    try:
        yield base_url
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server.should_exit = True
        try:
            await asyncio.wait_for(task, timeout=3)
        except (TimeoutError, asyncio.CancelledError):
            task.cancel()
            try:
                await task
            except asyncio.CancelledError:
                pass


@pytest.mark.asyncio
async def test_health_check(live_server: str):
    """–ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    timeout = aiohttp.ClientTimeout(total=10)
    async with aiohttp.ClientSession(timeout=timeout) as client:
        async with client.get(f"{live_server}/docs") as resp:
            assert resp.status == 200, f"–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: {resp.status}"


@pytest.mark.asyncio
async def test_create_list_detail_with_aiohttp(live_server: str):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç: —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞, –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π
    """
    base = live_server
    timeout = aiohttp.ClientTimeout(total=30)  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è CI
    
    async with aiohttp.ClientSession(timeout=timeout) as client:
        # 1. POST /recipes - –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞
        payload = {
            "name": "–û–∫—Ä–æ—à–∫–∞",
            "cook_time_minutes": 25,
            "description": "–ù–∞—Ä–µ–∑–∞—Ç—å –∏ —Å–º–µ—à–∞—Ç—å.",
            "ingredients": [{"name": "–ö–≤–∞—Å"}, {"name": "–û–≥—É—Ä–µ—Ü"}],
        }
        
        print(f"\nPOST {base}/recipes")
        async with client.post(f"{base}/recipes", json=payload) as resp:
            assert resp.status == 201, f"POST failed with status {resp.status}"
            created = await resp.json()
            print(f"–°–æ–∑–¥–∞–Ω —Ä–µ—Ü–µ–ø—Ç ID={created['id']}")
            
            rid = created["id"]
            assert rid is not None
            assert created["name"] == "–û–∫—Ä–æ—à–∫–∞"
            assert created["cook_time_minutes"] == 25
            assert created["views"] == 0  # –ù–æ–≤—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–º–µ–µ—Ç 0 –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤

        # 2. GET /recipes - –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        print(f"\nüì• GET {base}/recipes")
        async with client.get(f"{base}/recipes") as resp:
            assert resp.status == 200, f"GET list failed with status {resp.status}"
            items = await resp.json()
            print(f"–ü–æ–ª—É—á–µ–Ω–æ {len(items)} —Ä–µ—Ü–µ–ø—Ç–æ–≤")
            
            assert isinstance(items, list)
            assert len(items) > 0, "–°–ø–∏—Å–æ–∫ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –ø—É—Å—Ç"
            assert any(x["id"] == rid for x in items), "–°–æ–∑–¥–∞–Ω–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ"

        # 3. GET /recipes/{id} - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Ü–µ–ø—Ç–∞ (–ø–µ—Ä–≤—ã–π —Ä–∞–∑)
        print(f"\nGET {base}/recipes/{rid} (–ø—Ä–æ—Å–º–æ—Ç—Ä #1)")
        async with client.get(f"{base}/recipes/{rid}") as resp:
            assert resp.status == 200, f"GET detail failed with status {resp.status}"
            detail = await resp.json()
            print(f"   ‚úÖ –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {detail['views']}")
            
            assert detail["id"] == rid
            assert detail["name"] == "–û–∫—Ä–æ—à–∫–∞"
            assert detail["views"] == 1, "–ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 1 –ø—Ä–æ—Å–º–æ—Ç—Ä"
            assert "–ö–≤–∞—Å" in detail["ingredients"]
            assert "–û–≥—É—Ä–µ—Ü" in detail["ingredients"]

        # 4. GET /recipes/{id} - –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π —Ä–µ—Ü–µ–ø—Ç–∞ (–≤—Ç–æ—Ä–æ–π —Ä–∞–∑)
        print(f"\nGET {base}/recipes/{rid} (–ø—Ä–æ—Å–º–æ—Ç—Ä #2)")
        async with client.get(f"{base}/recipes/{rid}") as resp:
            assert resp.status == 200
            detail2 = await resp.json()
            print(f"–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: {detail2['views']}")
            
            assert detail2["views"] == 2, "–ü–æ—Å–ª–µ –≤—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"


@pytest.mark.asyncio
async def test_recipe_validation(live_server: str):
    """–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ—Ü–µ–ø—Ç–∞"""
    base = live_server
    timeout = aiohttp.ClientTimeout(total=10)
    
    async with aiohttp.ClientSession(timeout=timeout) as client:
        # –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø—É—Å—Ç–æ–µ –∏–º—è
        payload = {
            "name": "",
            "cook_time_minutes": 25,
            "description": "Test",
            "ingredients": []
        }
        
        async with client.post(f"{base}/recipes", json=payload) as resp:
            assert resp.status == 422, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –ø—É—Å—Ç–æ–≥–æ –∏–º–µ–Ω–∏"


@pytest.mark.asyncio
async def test_get_nonexistent_recipe(live_server: str):
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"""
    base = live_server
    timeout = aiohttp.ClientTimeout(total=10)
    
    async with aiohttp.ClientSession(timeout=timeout) as client:
        async with client.get(f"{base}/recipes/999999") as resp:
            assert resp.status == 404, "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞"


@pytest.mark.asyncio
async def test_recipe_sorting(live_server: str):
    """–¢–µ—Å—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤: –ø–æ views DESC, –ø–æ—Ç–æ–º –ø–æ cook_time ASC"""
    base = live_server
    timeout = aiohttp.ClientTimeout(total=20)
    
    async with aiohttp.ClientSession(timeout=timeout) as client:
        # –°–æ–∑–¥–∞—ë–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤
        recipes_data = [
            {"name": "–ë—ã—Å—Ç—Ä—ã–π", "cook_time_minutes": 10, "description": "–ë—ã—Å—Ç—Ä–æ", "ingredients": []},
            {"name": "–ú–µ–¥–ª–µ–Ω–Ω—ã–π", "cook_time_minutes": 60, "description": "–î–æ–ª–≥–æ", "ingredients": []},
            {"name": "–°—Ä–µ–¥–Ω–∏–π", "cook_time_minutes": 30, "description": "–°—Ä–µ–¥–Ω–µ", "ingredients": []},
        ]
        
        created_ids = []
        for recipe in recipes_data:
            async with client.post(f"{base}/recipes", json=recipe) as resp:
                data = await resp.json()
                created_ids.append(data["id"])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä—ã –ø–µ—Ä–≤–æ–º—É —Ä–µ—Ü–µ–ø—Ç—É
        async with client.get(f"{base}/recipes/{created_ids[0]}") as resp:
            pass  # +1 –ø—Ä–æ—Å–º–æ—Ç—Ä
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        async with client.get(f"{base}/recipes") as resp:
            items = await resp.json()
            
            # –ü–µ—Ä–≤—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ (views=1)
            first = next(r for r in items if r["id"] == created_ids[0])
            assert first["views"] == 1
            
            # –°—Ä–µ–¥–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤ —Å 0 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            zero_views = [r for r in items if r["views"] == 0]
            if len(zero_views) >= 2:
                times = [r["cook_time_minutes"] for r in zero_views]
                assert times == sorted(times), "–†–µ—Ü–µ–ø—Ç—ã —Å 0 –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏"
